{"version":3,"sources":["components/Response.jsx","components/Header.jsx","components/App.jsx","index.js"],"names":["Response","props","className","content","prompt","response","Header","require","config","openai","OpenAI","process","OPENAI_API","App","useState","output","setOutput","inputRef","useRef","input","Form","onSubmit","submitEvent","preventDefault","current","value","complete","engine","maxTokens","temperature","topP","presencePenalty","frequencyPenalty","bestOf","res","console","log","prevOutputs","data","choices","text","Group","Control","placeholder","ref","Button","type","map","responseItem","index","id","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sNAWeA,MATf,SAAkBC,GAChB,OACE,sBAAKC,UAAU,OAAf,UACE,6BAAKD,EAAME,QAAQC,SACnB,4BAAIH,EAAME,QAAQE,eCITC,MARf,WACE,OACE,iCACE,oDCGNC,EAAQ,IAAUC,SAClB,IAAMC,EAAS,IAAIC,IAAOC,+KAAYC,YAEvB,SAASC,IACtB,MAA4BC,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAWC,mBACbC,EAAQ,GA4BZ,OACE,qCACE,cAAC,EAAD,IACA,cAACC,EAAA,EAAD,CAAMC,SA9BV,SAAsBC,GAEpBA,EAAYC,iBACZJ,EAAQF,EAASO,QAAQC,MACzB,gCAAC,8GACmBhB,EAAOiB,SAAS,CAChCC,OAAQ,UACRvB,OAAQe,EACRS,UAAW,GACXC,YAAa,GACbC,KAAM,EACNC,gBAAiB,EACjBC,iBAAkB,EAClBC,OAAQ,IATX,OACOC,EADP,OAYCC,QAAQC,IAAIF,GAEZlB,GAAU,SAACqB,GACT,MAAM,GAAN,mBACKA,GADL,CAEE,CAAEhC,SAAU6B,EAAII,KAAKC,QAAQ,GAAGC,KAAMpC,OAAQe,QAjBnD,0CAAD,IA0BE,SACE,eAACC,EAAA,EAAKqB,MAAN,WACE,cAACrB,EAAA,EAAKsB,QAAN,CACEC,YAAY,uCACZC,IAAK3B,IAEP,cAAC4B,EAAA,EAAD,CAAQC,KAAK,SAAb,4BAGH/B,EAAOgC,KAAI,SAACC,EAAcC,GACzB,OAAO,cAAC,EAAD,CAAsBC,GAAID,EAAO9C,QAAS6C,GAA3BC,SClD9B,IAAME,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC1C,EAAD,MAEFsC,K","file":"static/js/main.799713f1.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Response(props) {\r\n  return (\r\n    <div className=\"note\">\r\n      <h5>{props.content.prompt}</h5>\r\n      <p>{props.content.response}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Response;\r\n","import React from \"react\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <h1>Open AI DaVinci</h1>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import OpenAI from \"openai-api\";\nimport { useState, useRef } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form } from \"react-bootstrap\";\n\nimport Response from \"./Response\";\nimport Header from \"./Header\";\n\nrequire(\"dotenv\").config();\nconst openai = new OpenAI(process.env.OPENAI_API);\n\nexport default function App() {\n  const [output, setOutput] = useState([]);\n  const inputRef = useRef();\n  let input = \"\";\n  function handleSubmit(submitEvent) {\n    // prevent reloading\n    submitEvent.preventDefault();\n    input = inputRef.current.value;\n    (async () => {\n      const res = await openai.complete({\n        engine: \"davinci\",\n        prompt: input,\n        maxTokens: 50,\n        temperature: 0.7,\n        topP: 1,\n        presencePenalty: 0,\n        frequencyPenalty: 0,\n        bestOf: 1\n      });\n\n      console.log(res);\n\n      setOutput((prevOutputs) => {\n        return [\n          ...prevOutputs,\n          { response: res.data.choices[0].text, prompt: input }\n        ];\n      });\n    })();\n  }\n\n  return (\n    <>\n      <Header />\n      <Form onSubmit={handleSubmit}>\n        <Form.Group>\n          <Form.Control\n            placeholder=\"What would you like to tell davinci?\"\n            ref={inputRef}\n          />\n          <Button type=\"submit\">Let's try</Button>\n        </Form.Group>\n      </Form>\n      {output.map((responseItem, index) => {\n        return <Response key={index} id={index} content={responseItem} />;\n      })}\n    </>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./components/App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}